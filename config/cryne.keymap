/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1100  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
  behaviors {
    bspc_del: backspace_delete {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp BACKSPACE>, <&kp DELETE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      // Keeps mod dosn't remove the mod after the morph
      // keep-mods = <(MOD_RSFT)>;
    };

    right_home: right_hm {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp LEFT>, <&kp HOME>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    down_page_d: down_pgd {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOWN>, <&kp PAGE_DOWN>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    up_page_u: up_pgu {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp UP>, <&kp PAGE_UP>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    right_end: right_nd {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp RIGHT>, <&kp END>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    mouse_h: mouse_left_scroll {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&mmv MOVE_LEFT>, <&msc SCRL_LEFT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mouse_j: mouse_down_scroll {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&mmv MOVE_DOWN>, <&msc SCRL_DOWN>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mouse_k: mouse_up_scroll {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&mmv MOVE_UP>, <&msc SCRL_UP>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mouse_l: mouse_right_scroll {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&mmv MOVE_RIGHT>, <&msc SCRL_RIGHT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    td_layer1: tap_dance_layer1 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo 1>, <&to 1>;
    };
    td_layer2: tap_dance_layer2 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo 2>, <&to 2>;
    };
    td_layer3: tap_dance_layer3 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo 3>, <&to 3>;
    };

    mt: mod_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <230>;
      bindings = <&kp>, <&kp>;
      display-name = "Mod-Tap";
    };
  };
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      display-name = "Default Layer";
      // ----------------------------------------------------------------
      // |  Q  |  W  |  E  |  R  |  T  | |  Y  |  U  |  I  |  O  |  P  |
      // |  A  | S/⇧ | D/⎈ | F/⊞ | G/⎇ | | H/⎇ | J/⊞ | K/⎈ | L/⇧ |  ;  |
      // |  Z  |  X  |  C  |  V  |  B  | |  N  |  M  |  ,  |  .  |  /  |
      //       | LWR | RSE | SPC | TAB | | ESC | RET | LWR | BSPC|
      bindings = <
        &kp Q      &kp W        &kp E       &kp R      &kp T       &kp Y   &kp U      &kp I       &kp O        &kp P
        &mt LALT A &mt LSHIFT S &mt LCTRL D &mt LGUI F &kp G       &kp H   &mt RGUI J &mt RCTRL K &mt RSHIFT L &mt RALT SEMI
        &kp Z      &kp X        &kp C       &kp V      &kp B       &kp N   &kp M      &kp COMMA   &kp DOT      &kp FSLH
        /*       */&td_layer1   &td_layer2  &kp SPACE  &kp TAB     &kp ESC &kp RET    &td_layer1  &bspc_del
      >;
    };
    lower_layer {
      display-name = "Lower Layer";
      // ---------------------------------------------------------------
      // |  1  |  2  |  3  |  4  |  5  | |  6   |  7   |  8   |  9   |  0  |
      // |     |     |     |     |     | | ←/HM | ↓/PD | ↑/PU | →/EN |     |
      // |     |     |     |     |     | |      |      |      |      |     |
      //       |     |     |     | MOU | | TO0  |      |      |      |
      bindings = <
        &kp N1 &kp N2 &kp N3 &kp N4     &kp N5    &kp N6      &kp N7       &kp N8     &kp N9     &kp N0
        &trans &trans &trans &trans     &trans    &right_home &down_page_d &up_page_u &right_end &trans
        &trans &trans &trans &trans     &trans    &trans      &trans       &trans     &trans     &trans
        /*   */&trans &trans &td_layer3 &trans    &to 0       &trans       &trans     &trans
      >;
    };

    raise_layer {
      display-name = "Raise Layer";
      // ---------------------------------------------------------------
      // |  !  |  @  |  #  |  $  |  %  | |  ^  |  &  |  *  |  (  |  )  |
      // |     |     |     |     |     | |  -  |  =  |  [  |  ]  |  '  |
      // |     |     |     |     |     | |     |     |     |     |  \  |
      //       |     |     |     |     | | TO0 |     |     |     |
      bindings = <
        &kp EXCL &kp AT   &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR
        &trans   &trans   &trans    &trans    &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp APOS
        &trans   &trans   &trans    &trans    &trans      &trans    &trans    &trans    &trans   &kp BSLH
        /*     */&trans   &trans    &trans    &trans      &to 0     &trans    &trans    &trans
      >;
    };

    mouse_layer {
      display-name = "Mouse Layer";
      // ---------------------------------------------------------------
      // |     |     |     |     |     | |     |     |     |     |     |
      // |     |     |     |     |     | | MS← | MS↓ | MS↑ | MS→ |     |
      // |     |     |     |     |     | | MB1 | MB2 | MB3 |     |     |
      //       |     |     |     |     | | TO0 |     |     |     |
      bindings = <
        &trans &trans &trans &trans &trans    &trans   &trans   &trans   &trans   &trans
        &trans &trans &trans &trans &trans    &mouse_h &mouse_j &mouse_k &mouse_l &trans
        &trans &trans &trans &trans &trans    &mkp MB1 &mkp MB2 &mkp MB3 &trans   &trans
        /*   */&trans &trans &trans &trans    &to 0    &trans   &trans   &trans
      >;
    };
  };
};
