/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  behaviors {
    bspc_del: backspace_delete {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp BACKSPACE>, <&kp DELETE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      // Keeps mod dosn't remove the mod after the morph
      // keep-mods = <(MOD_RSFT)>;
    };
    mt: mod_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <200>;
      bindings = <&kp>, <&kp>;
      display-name = "Mod-Tap";
    };
    lt: layer_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&kp>;
      display-name = "Layer-Tap";
    };
  };
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      display-name = "Default Layer";
      // ----------------------------------------------------------------
      // |  Q  |  W  |  E  |  R  |  T  | |  Y  |  U   |  I  |  O  |  P  |
      // |  A  |  S  |  D  |  F  |  G  | |  H  |  J   |  K  |  L  |  ;  |
      // |  Z  |  X  |  C  |  V  |  B  | |  N  |  M   |  ,  |  .  |  /  |
      //       | TAB | LWR | SPC | RSE | | ESC | RET | RSE  | BSPC|
      bindings = <
        &kp Q        &kp W       &kp E      &kp R      &kp T       &kp Y   &kp U      &kp I      &kp O       &kp P
        &mt LSHIFT A &mt LCTRL S &mt LALT D &mt LGUI F &kp G       &kp H   &mt RGUI J &mt RALT K &mt RCTRL L &mt RSHIFT SEMI
        &kp Z        &kp X       &kp C      &kp V      &kp B       &kp N   &kp M      &kp COMMA  &kp DOT     &kp FSLH
        /*         */&mo 1       &mo 2      &kp SPACE  &kp TAB     &kp ESC &kp RET    &mo 2      &bspc_del
      >;
    };
    lower_layer {
      display-name = "Lower Layer";
      // ---------------------------------------------------------------
      // |  1  |  2  |  3  |  4  |  5  | |  6  |  7  |  8  |  9  |  0  |
      // |     |     |     |     |     | | LFT | DWN |  UP | RGT |     |
      // |     |     |     |     |     | |     |     |     |     |     |
      //       |     |     |     |     | |     |     |     |     |
      bindings = <
        &kp N1   &kp N2   &kp N3    &kp N4    &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0
        &trans   &trans   &trans    &trans    &trans         &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans
        &trans   &trans   &trans    &trans    &trans         &trans   &trans   &trans &trans    &trans
        /*     */&trans   &trans    &trans    &trans         &trans   &trans   &trans &trans
      >;
    };

    raise_layer {
      display-name = "Raise Layer";
      // ---------------------------------------------------------------
      // |  !  |  @  |  #  |  $  |  %  | |  ^  |  &  |  *  |  (  |  )  |
      // |     |     |     |     |     | |  -  |  =  |  [  |  ]  |  \  |
      // |     |     |     |     |     | |  _  |  +  |  {  |  }  | "|" |
      //       | GUI |     | ADJ | SPC | | ENT |     | ADJ | ALT |
      bindings = <
        &kp EXCL &kp AT   &kp HASH  &kp DLLR  &kp PRCNT &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR
        &trans   &trans   &trans    &trans    &trans    &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH
        &trans   &trans   &trans    &trans    &trans    &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE
        /*     */&trans   &trans    &trans    &trans    &trans    &trans    &trans    &trans
      >;
    };
  };
};
